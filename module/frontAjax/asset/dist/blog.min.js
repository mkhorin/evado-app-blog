'use strict'; class Blog { static getElementClass (name) { return Blog[name]?.prototype instanceof Blog.Element ? Blog[name] : null; } static toggle ($element, state) { return $element.toggleClass('hidden', !state); } static getTemplate (name, container) { return container.querySelector(`template[data-id="${name}"]`)?.innerHTML; } static resolveTemplate (text, data) { return text.replace(/{{(\w+)}}/gm, (match, key)=> data.hasOwnProperty(key) ? data[key] : ''); } static setPageTitle (text) { const $title = $(document.head).find('title'); const base = $title.data('title'); $title.html(text ? `${Jam.t(text)} - ${base}` : base); } static escapeData (data, keys) { for (const key of keys || Object.keys(data)) { data[key] = this.escapeHtml(data[key]); } } static escapeHtml (value) { return typeof value === 'string' ? value.replace(/</g, '&lt;').replace(/>/g, '&gt;') : value; } constructor () { this.ajaxQueue = new Blog.AjaxQueue; this.$container = $('.blog'); this.createHandlers(); this.initHandlers(); this.on('article:ready', this.onReadyArticle.bind(this)); this.on('articles:ready', this.onReadyArticles.bind(this)); this.constructor.setPageTitle(); } createHandlers () { this._handlers = []; for (const element of document.querySelectorAll('[data-blog-handler]')) { const name = element.dataset.blogHandler; const Class = this.constructor.getElementClass(name); if (Class) { this._handlers.push(new Class(element, this)); } else { console.error(`Handler not found: ${name}`); } } } initHandlers () { for (const handler of this._handlers) { if (handler.init) { handler.init(); } } } toggleLoader (state) { $('.global-loader').toggle(state); } on () { this.$container.on(...arguments); } trigger () { this.$container.trigger(...arguments); } onReadyArticle (event, {title}) { this.$container.addClass('article-view'); this.$container.removeClass('articles-view'); this.constructor.setPageTitle(title); } onReadyArticles () { this.$container.removeClass('article-view'); this.$container.addClass('articles-view'); this.constructor.setPageTitle('Articles'); } } Blog.Element = class Element { constructor (container, blog) { this.blog = blog; this.container = container; this.$container = $(container); this.dataMap = this.$container.data(); } getTemplate (name) { return Blog.getTemplate(name, this.container); } resolveTemplate (name, data) { return Blog.resolveTemplate(this.getTemplate(name), data); } renderError (data) { return `${data.statusText}: ${data.responseText}`; } }; Blog.Loadable = class Loadable extends Blog.Element { init () { this.load(); } load () { this._deferred = this.blog.ajaxQueue .post(this.dataMap.url, this.getPostData()) .done(this.onDone.bind(this)) .fail(this.onFail.bind(this)); } getPostData () { return {}; } onDone (data) { this.container.innerHTML = this.render(data); } onFail (data) { this.container.innerHTML = this.renderError(data); } render (data) { return data; } renderError (data) { return `${data.statusText}: ${data.responseText}`; } }; Blog.AjaxQueue = class AjaxQueue { constructor () { this._tasks = []; } post (...args) { const deferred = $.Deferred(); this._tasks.push({deferred, args}); this.execute(); return deferred; } remove (deferred) { const index = this.getTaskIndex(deferred); if (index !== undefined) { this._tasks.splice(index, 1); } } getTaskIndex (deferred) { for (let i = 0; i < this._tasks.length; ++i) { if (this._tasks[i].deferred === deferred) { return i; } } } execute () { if (this._xhr || !this._tasks.length) { return false; } const {deferred, args} = this._tasks.splice(0, 1)[0]; const csrf = Jam.getCsrfToken(); const data = {csrf, ...args[1]}; const params = { method: 'post', contentType: 'application/json', url: args[0], data: JSON.stringify(data) }; this._xhr = $.ajax(params) .always(() => this._xhr = null) .done(data => deferred.resolve(data)) .fail(data => deferred.reject(data)); deferred.done(this.next.bind(this)); deferred.fail(this.next.bind(this)); } next () { this.execute(); } abort () { this._xhr?.abort(); this._xhr = null; } }; Blog.Article = class Article extends Blog.Element { init () { this.article = this.container.querySelector('.article'); this.blog.on('article:show', this.onShow.bind(this)); this.$container.on('submit', '.comment-form', this.onSubmitComment.bind(this)); this.$container.on('click', '.to-articles', this.onArticles.bind(this)); this.$container.on('click', '.category-item', this.onCategory.bind(this)); } load () { this.blog.toggleLoader(true); this.blog.ajaxQueue.post(this.dataMap.url, this.getPostData()) .done(this.onDone.bind(this)) .fail(this.onFail.bind(this)); } getPostData () { return { class: 'article', view: 'publicView', id: this.id }; } onCategory (event) { event.preventDefault(); this.blog.trigger('category:change', {id: event.target.dataset.id}); } onArticles (event) { event.preventDefault(); this.blog.trigger('articles:ready'); } onShow (event, {id}) { this.id = id; this.load(); } onDone (data) { data = data || {}; blog.constructor.escapeData(data, ['title', 'subtitle']); data.date = data.date ? moment(data.date).format('L') : ''; data.categories = Array.isArray(data.categories) ? data.categories : []; data.categories = data.categories.map(this.resolveCategoryTemplate, this).join(''); data.photos = Array.isArray(data.photos) ? data.photos : []; const photos = data.photos.map(this.resolvePhotoTemplate, this).join(''); data.carousel = photos ? this.resolveTemplate('carousel', {photos}) : ''; data.comments = Array.isArray(data.comments) ? data.comments : []; data.commentCounter = data.comments.length; data.comments = data.comments.map(this.resolveCommentTemplate, this).join(''); this.article.innerHTML = this.resolveTemplate('article', data); Jam.t(this.$container); this.completeLoad(data); } onFail (data) { const text = this.renderError(data); this.article.innerHTML = this.resolveTemplate('alert', {text}); this.completeLoad({title: text}); } completeLoad (data) { scrollTo(0, 0); this.blog.toggleLoader(false); this.blog.trigger('article:ready', data); } resolveCategoryTemplate (data) { if (!data || typeof data !== 'object') { return 'Invalid category data'; } data._title = Jam.escape(data._title); return this.resolveTemplate('category', data); } resolvePhotoTemplate (data, index) { if (!data || typeof data !== 'object') { return 'Invalid photo data'; } data.active = index ? '' : 'active'; blog.constructor.escapeData(data); return this.resolveTemplate('photo', data); } resolveCommentTemplate (data) { if (!data || typeof data !== 'object') { return 'Invalid comment data'; } blog.constructor.escapeData(data); data.date = data._createdAt ? moment(data._createdAt).format('L LTS') : ''; data.user = data.name; return this.resolveTemplate('comment', data); } onSubmitComment (event) { event.preventDefault(); const data = { name: this.getFormValue('name'), email: this.getFormValue('email'), content: this.getFormValue('content'), article: {links: [this.id]} }; const params = { class: 'comment', view: 'publicCreate', data }; this.clearFormErrors(); this.blog.ajaxQueue.post(this.getForm().attr('action'), params) .done(this.onCommentDone.bind(this)) .fail(this.onCommentFail.bind(this)); } onCommentDone () { Blog.toggle(this.getForm(), false); Blog.toggle(this.getDoneAlert(), true); } onCommentFail ({responseText}) { try { const data = JSON.parse(responseText); for (const element of this.getForm().find('[name]')) { this.addFormError(data[element.name], element); delete data[element.name]; } if (Object.values(data).length) { Blog.toggle(this.getFailAlert(), true).html(JSON.stringify(data)); } } catch { Blog.toggle(this.getFailAlert(), true).html(responseText || 'Comment failed'); } } getDoneAlert () { return this.$container.find('.done-comment'); } getFailAlert () { return this.$container.find('.fail-comment'); } getForm () { return this.$container.find('.comment-form'); } getFormValue (name) { return this.getFormInput(name).val(); } getFormAttr (name) { return this.getFormInput(name).closest('.form-group'); } getFormInput (name) { return this.$container.find(`[name="${name}"]`); } addFormError (message, element) { if (typeof message === 'string') { const $attr = this.getFormAttr(element.name); $attr.addClass('has-error'); $attr.find('.error-block').html(Jam.t(message)); } } clearFormErrors () { this.getForm().find('.has-error').removeClass('has-error'); Blog.toggle(this.$container.find('.alert'), false); } }; Blog.Articles = class Articles extends Blog.Element { init () { this.list = this.container.querySelector('.list'); this.pagination = new Blog.Pagination({ $container: this.$container, pageTemplate: this.getTemplate('page'), paginationTemplate: this.getTemplate('pagination') }); this.$container.on('pagination:change', this.onChangePage.bind(this)); this.$container.on('click', '.article-list-item', this.onArticle.bind(this)); this.$container.on('click', '.tag-item', this.onCategoryTag.bind(this)); this.blog.on('category:change', this.onChangeCategory.bind(this)); this.blog.on('search:change', this.onSearch.bind(this)); this.load(); } load () { this.blog.toggleLoader(true); this.blog.ajaxQueue.remove(this.deferred); this.deferred = this.blog.ajaxQueue.post(this.dataMap.url, this.getPostData()) .done(this.onDone.bind(this)) .fail(this.onFail.bind(this)); } getPostData () { return { class: 'article', view: 'publicList', start: this.pagination.getOffset(), length: this.pagination.getPageSize(), search: this.search, filter: this.getFilterData() }; } getFilterData () { const data = []; if (this.category) { data.push({ attr: 'categories', op: 'equal', value: this.category }) } return data.length ? data : null; } onArticle (event) { event.preventDefault(); const id = $(event.target).closest('[data-id]').data('id'); this.blog.trigger('article:show', {id}); } onCategoryTag (event) { event.preventDefault(); this.blog.trigger('category:change', {id: event.target.dataset.id}); } onChangeCategory (event, {id}) { this.category = id; this.search = null; this.blog.trigger('search:clear'); this.load(); } onSearch (event, {search}) { this.search = search; this.load(); } onChangePage (event, {page}) { this.load(); } onDone (data) { let items = data?.items; items = Array.isArray(items) ? items : []; items = items.map(this.prepareItem, this); this.pagination.setTotal(data?.totalSize); this.list.innerHTML = this.renderItems(items) + this.pagination.render(); Jam.t($(this.list)); this.completeLoad(); } onFail (data) { this.list.innerHTML = this.renderError(data); this.completeLoad(); } completeLoad () { scrollTo(0, 0); this.blog.toggleLoader(false); this.blog.trigger('articles:ready'); } prepareItem (data) { data.date = data.date ? moment(data.date).format('L') : ''; return data; } renderItems (items) { if (items.length) { return items.map(this.resolveItemTemplate, this).join(''); } return this.resolveTemplate('alert', { text: Jam.t('No articles found') }); } resolveItemTemplate (data) { let template = 'article'; if (data.mainPhoto) { template = 'photoArticle'; data.thumbnail = data.mainPhoto._id || data.mainPhoto; data.thumbnailText = data.mainPhoto.text; } if (Array.isArray(data.categories)) { data.categories = data.categories.map(this.resolveItemCategory, this).join(''); } return this.resolveTemplate(template, data); } resolveItemCategory (data) { data._title = Jam.escape(data._title); data.name = Jam.escape(data.name) || data._title; return this.resolveTemplate('category', data); } }; Blog.CategoryWidget = class CategoryWidget extends Blog.Loadable { init () { super.init(); this.$container.on('click', '[data-id]', this.onItem.bind(this)); this.blog.on('category:change', this.onChangeCategory.bind(this)); } getPostData () { return { class: 'category' }; } onChangeCategory (event, {id}) { this.$container.find('.active').removeClass('active'); this.$container.find(`[data-id="${id}"]`).addClass('active'); } onItem (event) { event.preventDefault(); const $target = $(event.currentTarget); const id = $target.hasClass('active') ? null : $target.data('id'); this.blog.trigger('category:change', {id}); } render (data) { let items = data?.items; items = Array.isArray(items) ? items : []; items = items.filter(data => data.publicArticleCounter); items = items.map(data => { data._title = Jam.StringHelper.escapeTags(data._title); return this.resolveTemplate('item', data); }).join(''); return items ? this.resolveTemplate('list', {items}) : this.resolveTemplate('error', {text: Jam.t('No categories with articles')}); } renderError () { const text = super.renderError(...arguments); return this.resolveTemplate('error', {text}); } }; Blog.Pagination = class Pagination { constructor (params = {}) { this.page = 0; this.pageSize = params.pageSize || 5; this.params = params; this.$container = params.$container; this.$container.on('click', '.pagination [data-action="first"]', this.onFirst.bind(this)); this.$container.on('click', '.pagination [data-action="prev"]', this.onPrev.bind(this)); this.$container.on('click', '.pagination [data-action="next"]', this.onNext.bind(this)); this.$container.on('click', '.pagination [data-action="last"]', this.onLast.bind(this)); this.$container.on('click', '.pagination [data-page]', this.onPage.bind(this)); } isValidPage (page) { return Number.isInteger(page) && page >= 0 && page < this.numPages; } getOffset () { return this.page * this.pageSize; } getPageSize () { return this.pageSize; } onFirst (event) { event.preventDefault(); this.setPage(0); } onPrev (event) { event.preventDefault(); this.setPage(this.page - 1); } onLast (event) { event.preventDefault(); this.setPage(this.numPages - 1); } onNext (event) { event.preventDefault(); this.setPage(this.page + 1); } onPage (event) { event.preventDefault(); this.setPage(event.target.dataset.page); } setPage (page) { page = Number(page); if (page !== this.page && this.isValidPage(page)) { this.page = page; this.$container.trigger('pagination:change', {page}); } } setTotal (total) { total = Number.isInteger(total) ? total : 0; this.numPages = Math.ceil(total / this.pageSize); } render () { if (this.numPages < 2) { return ''; } return Blog.resolveTemplate(this.params.paginationTemplate, { pages: this.renderPages() }); } renderPages () { let result = ''; for (let i = 0; i < this.numPages; ++i) { result += Blog.resolveTemplate(this.params.pageTemplate, { active: i === this.page ? 'active' : '', page: i, text: i + 1 }); } return result; } }; Blog.SearchWidget = class SearchWidget extends Blog.Element { init () { this.$search = this.$container.find('[type="search"]'); this.$container.on('submit', this.onSubmit.bind(this)); this.blog.on('search:clear', this.onClear.bind(this)); } onClear () { this.$search.val(''); } onSubmit (event) { event.preventDefault(); this.triggerChange(); } triggerChange () { this.blog.trigger('search:change', {search: this.$search.val()}); } };